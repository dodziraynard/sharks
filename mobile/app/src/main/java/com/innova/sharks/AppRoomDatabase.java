package com.innova.sharks;import android.content.Context;import androidx.annotation.NonNull;import androidx.room.Database;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.sqlite.db.SupportSQLiteDatabase;import com.innova.sharks.dao.BookDao;import com.innova.sharks.dao.CourseDao;import com.innova.sharks.dao.LessonDao;import com.innova.sharks.dao.QuizDao;import com.innova.sharks.dao.ScholarshipDao;import com.innova.sharks.dao.StudentDao;import com.innova.sharks.dao.TeacherDao;import com.innova.sharks.models.Book;import com.innova.sharks.models.Course;import com.innova.sharks.models.Lesson;import com.innova.sharks.models.Quiz;import com.innova.sharks.models.Scholarship;import com.innova.sharks.models.Student;import com.innova.sharks.models.Teacher;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Database(entities = {Course.class, Lesson.class, Scholarship.class, Quiz.class, Teacher.class, Student.class, Book.class}, version = 1, exportSchema = false)public abstract class AppRoomDatabase extends RoomDatabase {    public static final String TIMETABLE_DATABASE = "sharks_database";    private static final int NUMBER_OF_THREADS = 4;    public static final ExecutorService databaseWriteExecutor = Executors.newFixedThreadPool(NUMBER_OF_THREADS);    private volatile static AppRoomDatabase INSTANCE;    private static final Callback sRoomDatabaseCallback = new Callback() {        @Override        public void onCreate(@NonNull SupportSQLiteDatabase db) {            super.onOpen(db);            databaseWriteExecutor.execute(() -> {                CourseDao courseDao = INSTANCE.CourseDao();                LessonDao lessonDao = INSTANCE.LessonDao();                ScholarshipDao scholarshipDao = INSTANCE.ScholarshipDao();                QuizDao quizDao = INSTANCE.QuizDao();                TeacherDao teacherDao = INSTANCE.TeacherDao();//                courseDao.insertCourses(getDummyCourses());//                lessonDao.insertLessons(getDummyLessons());//                scholarshipDao.insertScholarships(getDummyScholarships());//                quizDao.insertQuizzes(getDummyQuizzes());//                teacherDao.insertTeachers(getDummyTeachers());            });        }    };    public static AppRoomDatabase getDatabase(final Context context) {        if (INSTANCE == null) {            synchronized (AppRoomDatabase.class) {                if (INSTANCE == null) {                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),                            AppRoomDatabase.class, TIMETABLE_DATABASE)                            .addCallback(sRoomDatabaseCallback)                            .fallbackToDestructiveMigration()                            .build();                }            }        }        return INSTANCE;    }    public abstract CourseDao CourseDao();    public abstract LessonDao LessonDao();    public abstract ScholarshipDao ScholarshipDao();    public abstract QuizDao QuizDao();    public abstract TeacherDao TeacherDao();    public abstract StudentDao StudentDao();    public abstract BookDao BookDao();}